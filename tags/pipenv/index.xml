<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>pipenv on 仲夏园</title><link>https://goplscn.github.io/tags/pipenv/</link><description>Recent content in pipenv on 仲夏园</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Wed, 23 Jan 2019 00:52:22 +0000</lastBuildDate><atom:link href="https://goplscn.github.io/tags/pipenv/index.xml" rel="self" type="application/rss+xml"/><item><title>pipenv 使用入门及规范</title><link>https://goplscn.github.io/post/pipenv-in-pratical/</link><pubDate>Wed, 23 Jan 2019 00:52:22 +0000</pubDate><guid>https://goplscn.github.io/post/pipenv-in-pratical/</guid><description>简介 Pipenv，它的项目简介为 Python Development Workflow for Humans，是 Python 著名的 requests 库作者 kennethreitz 写的一个包管理工具，它可以为我们的项目自动创建和管理虚拟环境并非常方便地管理 Python 包。
Pipenv我们可以简单理解为 pip 和 virtualenv 的集合体，它可以为我们的项目自动创建和管理一个虚拟环境。virtualenv 在使用时我们需要手动创建一个虚拟环境然后激活，Pipenv 会自动创建。
总的来说，Pipenv可以解决如下问题：
我们不需要再手动创建虚拟环境，Pipenv会自动为我们创建，它会在某个特定的位置创建一个 virtualenv 环境，然后调用 pipenv shell 命令切换到虚拟环境。 使用 requirements.txt 可能会导致一些问题，所以 Pipenv使用 Pipfile 和 Pipfile.lock 来替代之，而且 Pipfile 如果不存在的话会自动创建，而且在安装、升级、移除依赖包的时候会自动更新 Pipfile 和 Pipfile.lock 文件。 广泛使用 Hash 校验，保证安全性。 可以更清晰地查看 Python 包及其关系，调用 pipenv graph 即可呈现，结果简单明了。 可通过自动加载 .env 读取环境变量，简化开发流程。 安装 pip install pipenv
基本命令 1. 创建环境 pipenv 或者指定具体 python 版本 pipenv --python 3.</description></item></channel></rss>