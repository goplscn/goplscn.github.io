<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>book on 仲夏园</title><link>https://goplscn.github.io/tags/book/</link><description>Recent content in book on 仲夏园</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Wed, 01 Jul 2020 16:32:58 +0000</lastBuildDate><atom:link href="https://goplscn.github.io/tags/book/index.xml" rel="self" type="application/rss+xml"/><item><title>按测试员的方式思考</title><link>https://goplscn.github.io/post/think-like-a-tester/</link><pubDate>Wed, 01 Jul 2020 16:32:58 +0000</pubDate><guid>https://goplscn.github.io/post/think-like-a-tester/</guid><description>测试员有很多不同的背景，测试团队是多元化的集体，但是大多数人都同意：测试员的思考方式是不同的。怎么不同？有人说测试员是“消极”思维者。测试员会抱怨这种说法，认为自己喜欢征服，他们在报告坏消息时有一种特别的兴奋感。这是一种普遍观点。我们提出另一种观点。测试员并不抱怨，他们提供的是证据。测试员并不喜欢征服，他们喜欢打破产品没有问题的幻觉。测试员并不喜欢发布坏消息，他们喜欢把客户从虚假信念中解放出来。我们的观点是，按测试员的方式思考意味着实践认识论。测试运用的是认识论，不是靠傲慢或谦卑。
测试运用的是认识论 认识论研究如何认识所了解的东西：研究证据和推理。这是科学实践的基础。研究认识论的人有科学家、教育家和哲学家，当然还有精英级的软件测试员。学习认识论的学生研究科学、哲学和心理学，目标是了解怎样才能改进我们的思维。我们使用的术语比经典定义要宽，以便能够更多地利用批判性思维的最新成果。将认识论运用于软件测试，要问与以下类似的问题：
怎么知道软件足够好？ 如果软件并不是足够好，怎样才能知道？ 怎么知道已经完成了足够的测试？ 研究认识论有助于更好测试 直接与软件测试有关的认识论问题包括：
如何收集和评估证据。 如何进行有效的推论。 如何使用不同逻辑形式。 拥有合理的信念意味着什么。 形式和非形式推理之间的差别。 非形式推理的常见谬误。 自然语言的含义与模糊性。 如何做出好的决策。 研究认识论可帮助测试员设计有效的测试策略，更好地意识到自己工作中的错误，理解自己的测试能够证明什么、不能证明什么，并编写出无懈可击的测试报告。
认知心理学是测试的基础 如果说认识论告诉我们的是应该怎样思考，那么认知心理学告诉我们的是我们是怎样思考的。与测试有关的一些问题包括：
人的感觉和记忆可靠性。 信念从哪里来。 信念如何影响人的行为。 做出决策所使用的偏见和捷径。 如何了解并分享所知道的信息。 如何考虑复杂事情。 如何识别模式。 如何把想法和实物分类。 如何注意事物之间的差别。 记忆事件中的失真。 如何重新构建部分记忆的事件（例如不可再现的程序错误）。 研究认知心理学有助于理解影响测试员工作成绩的因素，以及影响人们解释自己工作方式的因素。测试应该使用因果关系理论进行系统推理，而不只是查看外部行为，并对照简单的预期描述进行检查。
测试需要推断，并不只是做输出与预期结果的比较 流行的观点认为，测试员只是执行测试用例，并对照预期结果比较执行结果。这种观点把测试看做是简单的比较活动，没有看到一些聪明人必须设计测试，并确定预期输出。想想看，测试设计人员几乎从来没有得到过应该测试什么的权威指导，更不要说应该期望什么了。可以得到的指导是要解释的主体。在现实生活中，大多数测试设计都是基于推断，或基于与测试员的推断有关的经验。不仅如此，这些推断还要随时间发生变化。像测试员那样思考，就是要掌握探索式推断的艺术。
探索式推断听起来可能像是奇怪的想法，这意味着要以一种不能事先预测的方式，通过一种思想引出另一种思想，然后再引出下一种思想。
优秀测试员会进行技术性、创造性、批判性和实用性地思考 各种类型的思考都要考虑测试的实施。但是我们认为需要提出四种主要思考：
技术性思考。对技术建模并理解因果关系的能力。这包括诸如相关技术事实的知识和使用工具并预测系统行为的能力。 创造性思考。产生思想并看到可能性的能力。测试员只能以能够想象得到的方式进行测试，只能寻找猜想会存在的问题。 批判性思考。评估思想并进行推断的能力。这包括在自己的思考中发现并消除错误的能力，将产品观察与质量准则关联起来的能力，以及针对特定信念或所建议的行动过程构建有说服力的测试用例的能力。 实用性思考。把想法付诸实践的能力。这种能力包括诸如运用测试工具，并使测试手段和力量与项目范围适应的技能。 总之，像测试员那样思考，会最终导致相信事物可能不像外表看起来那样。不管事物是怎样的，都可能有差别。我们发现，当测试过程以最具破坏性的方式失败时，根本原因最有可能是视野狭窄。换句话说，这不是运行了一万个测试，而本来应该运行一万零一个的问题；问题是没有想象出测试的总体大纲，没有做就算有两倍时间和资源也不会做的测试。
黑盒测试并不是基于无知的测试 黑盒测试意味着产品内部知识在测试中不起重要作用。大多数测试员都是黑盒测试员。为了做好黑盒测试就要了解用户，了解他们的期望和需要，了解技术，了解软件运行环境的配置，了解这个软件要与之交互的其他软件，了解软件必须管理的数据，了解开发过程，等等。黑盒测试的优势在于测试员可能与程序员的思考不同，因此有可能预测出程序员所遗漏的风险。
黑盒测试强调有关软件的用户和环境知识，这一点并不是所有人都喜欢的。我们甚至把黑盒测试描述为基于无知的测试，因为测试员自始至终都不了解软件内部代码。我们认为这反映出对测试团队角色的根本误解。我们不反对测试员了解产品的工作原理。测试员对产品的了解得越多，了解产品的方式越多，越能够更好地测试它。但是，如果测试员主要关注的是源代码，以及能够从源代码导出的测试，则测试员所做的工作也许就是程序员已经做过的，并且测试员关于这些代码的知识要少于程序员。制造问题的思路，无法解决问题。
测试员不只是游客 测试员对产品做的大量不是测试的事，有助于测试员对产品的了解。测试员可以浏览产品，看看产品由什么组成，怎么工作。这样做有很高的价值，但这不能算是测试。测试员和游客之间的差别在于，测试员把精力放在评估产品上，而不只是见证产品。虽然不必事先预测产品应该表现出的行为，但是试验产品能力的活动还没有成为测试，除非而且直到测试员运用某种如果问题存在就能标识的原理或过程时，这种活动才能成为测试。
探索要求大量思索 探索就是侦查，是没有边界的搜索。可把探索看作是在太空中遨游，需要前向、后向和侧向思索。
前向思索。根据已知探索未知，从看到的探索还没有看到的，注意支流和副作用。例如，看到一个打印菜单项，点击看看会发生什么。 后向思索。从怀疑或想象的东西返回到已知，尝试证实或否定自己的推测。例如：怀疑是否有打印这个文档的方法，于是打开菜单并检查是否有打印菜单项。 侧向思索。让自己的工作由于新冒出的想法而转移，然后再将探索主题返回到主线索上。例如：这个图很有意思。嘿！我想该打印一些更复杂的图，看看会怎么样。 即使没有要测试的产品，也可以探索。可以使用同样的思索过程探索一组文档，或与程序员面谈。通过构建更丰富、更具想象力的产品模型，探索也会不断取得进展。这些模型以后会使测试员设计出有效的测试。
运用试探法快速产生测试思路 试探法是一种经验规则，是一种基于经验做出猜测的方法。由于可能的测试用例数量是无限的，因此肯定要选出在所面临的时间和预算约束条件下有效的少量测试用例。有经验的测试员会收集并共享能够改进其猜测质量的测试试探方法。一组好的试探方法有助于很快地生成测试。以下是采用试探测试的一些例子：
测试边界。边界更有可能暴露规格说明的模糊问题。 测试所有错误信息。错误处理代码与主流功能代码相比，一般比较弱。 测试与程序员的配置不同的配置。程序员已经偏信自己的配置没有问题。 运行比较难设置的测试。在其他条件相同的情况下，易于设置的测试更有可能已经被执行过。 避免冗余测试。如果某个测试实际上是重复其他测试，就不会产生新价值。 为了明智地运用试验法，请注意：试探法中并没有智慧，智慧来自测试员。试探法所能够做的，只不过就是为测试员的思考提出建议。盲目使用自己并不了解的试探法并不是好的测试实践。在收集测试方法时，要了解每个方法背后的原理，以及更适用和不太适用的条件。</description></item><item><title>测试员的角色</title><link>https://goplscn.github.io/post/the-role-of-the-tester/</link><pubDate>Tue, 30 Jun 2020 10:40:43 +0000</pubDate><guid>https://goplscn.github.io/post/the-role-of-the-tester/</guid><description>一个角色就是一种关系。这意味着人们不能控制自己的角色，但可以协商。别人期望从测试员那里得到的可能并不合理。当测试员由于低质量的产品受到指责时（这种事时有发生），不管是谁指责，可能都存在分不清角色的问题。也许他们认为测试员的工作，就是在产品交付之前使用“质量魔术棒”敲打产品，他们也许认为测试员敲打得还不够狠。
当测试员清楚了自己的角色之后，在协商角色内容时，就有了在可能出现的任何情况下确立对自己预期的基础。但是，即使是清晰和恰当的测试角色也是一种苛求。
测试员的使命决定要做的一切 测试员的使命，可能要取决于自己的行业、公司、项目或团队的个性，测试项目也千差万别。把测试作为一种工艺发展的挑战，一直是建立测试实践对话所面临的困难，这种测试实践要跨越我们之间的文化和技术差异。这些差异中的很多内容，决定了测试团队的不同使命。以下任何要求都可能决定测试员的使命。
快速找出重要软件问题。 对产品质量提出总体评估。 确认产品达到某种具体标准。 帮助客户改进产品质量和可测试性。 保证测试过程能够达到可分清责任的标准。 就测试和测试员协作方式培训客户。 采用特定的方法集或遵循特定的规则集。 帮助预测和控制成本。 帮助客户改进其过程。 以最小化成本、时间或尽可能减少副作用的方式，完成自己的工作。 为满足特定客户要求，完成所有必要的工作。 如果测试员将时间和精力都投入到客户并不关心的需求上，就会冒做无关工作或生产率低的风险。测试员要与自己的经理协商使命问题，并明确使命，如果不能就使命达成一致意见，就不会有做任何工作的好基础。
**如果测试员不知道该做什么怎么办？**一种回答是评审使命。这样做可以找出自己的核心问题。如果测试员明确自己的测试使命，就可以为自己的工作辩护，并明确地确定下一步要做什么。测试员还可以用简单的描述，向其他人解释自己的角色。如果由于某种原因不能完成自己的使命，应该立即把这个问题汇报给管理层。
**如果测试员确切地知道要做什么该怎么办？**经常重新考虑自己的使命，保证自己的计划不会由于过于偏重测试问题的一个方面，而忽略其他方面。
测试员为很多客户服务 测试是一种服务角色，要乐于接受这种角色，因为测试员提供的服务是至关重要的。服务就意味着有客户，即要被服务的人。测试员是否成功，主要是看其是否很好地满足了客户的要求和最佳利益。这不会太难，不过测试会有很多客户，这些客户都有自己的需要，而且他们的各种需要不一定一致。
项目经理。项目经理有资格了解测试员的工作进展并施加影响。测试员根据要求向其报告工作状态。指挥项目是项目经理的特权。测试员的责任就是告诉项目经理自己能做什么，不能做什么，有关项目的决策和条件会对测试产生什么影响。 程序员。通过尽可能迅速地提供好的错误报告，使得程序员的工作更容易一些。努力提高自己的技能并了解产品，以免用错误的或用毫无意义的报告浪费程序员的时间。如果测试员可以做到这一点，就可以赢得更多的信任，而这种信任又可以转化为支持和影响。 技术文档编写员。与测试员一样，负责编写文档和在线帮助的技术文档编写员也不能得到产品的完整信息。测试员可以帮助他们理解产品到底怎样发挥效能，并为其指出文档中的错误。技术文档编写员也会帮助测试员。当技术文档编写员研究产品，以及必须阅读文档的用户会怎样使用产品时，会了解到一些测试员不知道的信息。如果测试员与技术文档编写员有很好的关系，编写员就会告诉测试员有关产品的新特性、新用法、测试计划中的漏洞和他们所发现的软件问题。这些问题中的一部分永远也不会被报告，除非某个文档编写员知道哪个测试员关心这些程序问题。 技术支持员。遗留在产品中的任何问题都会为技术支持员带来负担。测试员通过告诉技术支持员可能会给用户带来麻烦的产品问题，向其提供服务。如果测试员在开发期间与技术支持员一起工作，有时技术支持员会帮助测试员找出应该更正的软件问题。测试员也应该通过研究发现的难题，为技术支持员提供帮助。通过这种方式，能够把测试员与技术支持员拉得更近，进而与客户也更近了。 市场开发员。市场开发员需要了解产品中任何与产品应该提供给客户的关键利益不一致的地方。对于程序员来说是很小的程序问题，对于市场开发员来说可能会是至关重要的问题。他们也许能意识到这种程序问题会使客户较难完成某种重要任务。此外，通过评审市场开发计划文档或描述，测试员可以帮助市场开发员对产品能力有更精确的认识。 管理层和项目相关人员。测试员服务于公司业务，这也是为什么测试员必须小心，不要像个质量狂，而不是通情达理的人的原因。特别是到了项目要结束的时候，测试员要以兼顾公司短期和长期利益的方式完成自己的职责。要以明确、简洁的词汇编写测试状态报告，一遍执行经理能够感到有做出决策的依据。 用户。在测试员的心中，要想着将要使用该产品的人。当然，用户的满意是项目的最高利益。但是还要考虑满足主要用户对项目团队的特殊要求。 以上列出的各条没有什么特别顺序，不过在实际项目中可能有一定顺序，因此要认真研究，找出对项目最重要的人，找出要服务的人。这是做好测试工作的第一步。
当心“完备的”测试 测试员的任务就是找出并报告重要的程序问题，但是不会发现所有的程序问题。为了发现全部程序错误，测试员必须检查所有可能有问题的地方，要在所有可能发生的不同条件下观察这些地方，还需要一种十分可靠的方法，当所有类型的程序错误发生时，都能够识别出来。如果测试员认为自己能够做到这些，那么要么产品非常简单，要么测试员的想象力太差。
知道并承认自己不能做所有的事之后，测试员必须选择如何使用自己的时间。
有一些测试员承认自己不知道是否发现了产品中的全部问题，但仍然不准确地讨论结束测试的含义。”对这个产品我需要测试5天“可以解释为，他可以在5天之内对产品进行完备的测试，也可能意味着他会在5天内发现所有问题。完备性常常是隐含地表示出来的，而不是明说出来的。不管是哪种情况，这都是必须小心对待的概念。请考虑完备测试可能的含义：
完全发现了产品中的每个问题。 完全检查了产品的每个部分。 完成了自认为是有用和经济的测试。 尽自己所能，完全达到了项目团队制定的目标。 完成了约定的测试。 完成了在一定条件下人所能够测试的所有内容。 完成了自己所承担的测试部分，不考虑其他人的工作。 完成了对产品很广、但是不深的测试。 完成了对产品的一种测试。 用完了分配给测试的时间。 如果测试员小心地澄清自己的意思，不要有“完备”、“完成”、“结束”等含义，则可能会安全，由于有些工作没有做而受到的责备可能更少，在收到责备时可以更好地为自己辩护。请注意，”完备“的定义并不是在项目一开始就能够最终确定的，随着测试项目的进展，随着新测试任务的突然出现，需要重新考虑。
为了解决在完备性上的普遍沟通问题，可让客户想想了解测试过程。总结自己实施的测试，以及为什么值得实施这些测试，并告诉客户自己没有做的其他值得做的测试，以及为什么没有做这些测试。
迅速找出重要程序问题 测试员的使命很可能包括找出重要的（与无意义相反）程序问题，而且要迅速找出。如果是这样，那么这对测试员所执行的测试意味着什么呢？
首先测试经过变更的部分，然后测试没有变化的部分。修改和更新都意味着新的风险。 首先测试核心功能，然后测试辅助功能，测试产品所完成的关键和常用功能，测试完成产品基本任务的功能。 首先测试能力，然后测试可靠性。先测试每个功能是否完全能用，然后再深入检查任何一个功能在很多不同条件下表现如何。 首先测试常见情况，然后测试少见情况。使用常用的数据和使用场景。 首先测试场景威胁，然后测试罕见威胁。用最有可能出现的压力和错误情况进行测试。 首先测试影响大的问题，然后测试影响小的问题。测试在出现失效的情况下会产生大量破坏的产品部件。 首先测试最需要的部分，然后测试没有要求的部分。测试对团队其他人有重要意义的任何不等的任何问题。 测试员如果对产品、产品必须与之交互的软件和硬件以及将使用的人越了解，越有可能更快地找出重要问题。应好好研究这些方面的内容。
跟着程序员走 为程序员提供支持，很可能是测试员使命的关键部分。在测试员测试程序员正在编写或刚刚完成的程序时，测试员的反馈有助于提高程序员的工作效率。程序员交付软件后，应该马上测试；程序员修改代码后，应该马上测试所做的变更。尽可能建立最短、最快的反馈环路。当程序员正在苦苦地思索测试员刚刚发现的程序问题时，测试员又开始寻找更多的程序问题。（对于测试员来说，）理想情况是，程序员为了修改测试员找出的程序问题忙得团团转，使程序员，而不是测试员，成为项目的瓶颈。
别指望任何人会理解测试，或理解测试员需要什么条件才能搞好测试 让客户了解为了有效地完成测试工作都需要什么条件，完全要靠测试员自己。测试员要受管理层和程序员决策的很大影响。如果他们的计划不明确，或设计出的产品很难测试，测试工作就会很难进行。测试员也许不会得到想要的一切，但是测试员可以向管理层和程序员提供帮助自己的机会。
管理层和程序员并不是不关心测试或质量，他们也许只是不理解自己的行动会对测试过程产生的影响。测试工作的一个重要部分就是向客户解释测试。测试员的解释就像是流感疫苗，有利于健康而又不那么痛苦，但是疫苗的作用会逐渐衰退，必须一遍又一遍地解释。
摘抄自《软件测试经验与教训》</description></item><item><title>结构化思维方法</title><link>https://goplscn.github.io/post/structure-thinking-methods/</link><pubDate>Sun, 05 Jan 2020 15:07:09 +0000</pubDate><guid>https://goplscn.github.io/post/structure-thinking-methods/</guid><description>思维混乱，是因为大脑没有结构 请你花10秒钟的时间，记住以下的20个数字：
好，我们再来试一组数字，还是花10秒钟来记住它：
其实这2组的20个数字是一样的，但是不是觉得第二组一下子就记住了？
为什么会这样？ 因为第二组数据更符合我们大脑的使用习惯，数字与数字之间有清晰的逻辑和结构。
我们大脑处理信息有2个规律：
太多的信息记不住 喜欢有规律的信息 可你有没有遇到过这样的情况：有人口若悬河的和你讲了半天，他说的每个字你都听得懂，然而组合在一起，你并不知道他想说什么，内容没有逻辑，语句没有重点，就像刚才那一串杂乱的数字...
听他说话时间一长，你甚至开始头疼，变得焦躁，心里骂到：“你TM到底想说什么...？”
你别觉得听着难受，讲的人，他自己也许更难受！
明明心里有很多想法，甚至做了上百页的PPT，但就是讲不清楚….为什么会这样？
因为思维没有结构 我们思考问题的时候，脑子里的想法会不断地涌现出来，看似有很多，却杂乱无章，就像是衣橱里的一堆没有整理的衣服，彼此缠绕，互相堆砌在一起。
当有人问你，你能说说你有哪些衣服吗？
“嗯....我有很多衣服（想法）...”
能详细点说吗？ “我有一条蓝裤子，一条橘黄色裙子，一件白衬衫，还有件灰白条纹衬衫，一条牛仔裤，一条蓝色竖条纹的裤子，还有顶黑色的帽子，哦对了，还有一条蓝色裤子（这个刚才好像说过了)…”
￥#%@#￥%@… 你到底有些啥？
“我刚才说的都是我有的啊…”
语言是思维的传声筒
如果你的思维没有经过整理，就会像这堆乱糟糟的衣服，你拥有他们，却无法理解他们！
自己看着难受，别人听着难懂！
那怎么办？如何让思维变得既全面又有序呢？
你需要结构化思维 所谓结构化思维，就像是把衣橱里的这些衣服，分门别类的整理好。
比如按季节分类，按穿着场合分类，按服装风格分类等等..
这时候，别人再问你：你有些什么衣服呢？
你回答：我一共有208件装备，分为：
夏季、春秋季、冬季三大类； 每个季节的衣服又分为工作装、休闲装、宴会装、运动装四大系列； 其中，休闲装里有田园、淑女、简约三种风格； 每种风格的衣服，拥有深色、浅色各3套搭配； 另外配了4双运动鞋，5双皮鞋，6双休闲鞋，7个包包，8顶帽子来应对不同需要.. 是不是听着清楚多了？
并且，当你需要使用这些整理好的衣服时，也会变得很方便。
比如，今天你想要和男朋友晚上去一个party，那么你不需要再从所有的衣服里翻来覆去的寻找，一件件试穿...
而是直接在已经分类好的衣橱中，找到宴会装区域，从里面拿起一套适合的即可。
把你的想法和思维内容，像整理衣服一样，分门别类的安放好，组成一个结构分明的整体，方便日后的理解、存储、使用。这个，就称之为「结构化思维」
学会结构化的思维，有什么好处？ 如果你能够习惯用结构化的方式进行思考，你的思维能力，沟通能力，学习能力都将获得大幅度的提升：
比如，公司的线下门店，生意突然下滑，怎么办？
如果你不会结构化思维，你可能会这样说...
思路清晰，考虑周全。
再比如，你们公司近期要举办一场大型的相亲活动，你是项目的负责人，目前正在召开项目工作会议，老板请你介绍一下本次活动目前的安排：
如果你不会结构化思维，你可能会这样表达...
是不是感觉整个表达逻辑非常的有序，层次分明？
除了表达和思考，结构化的能力还能帮助我们提高学习的效率，比如我问你：过去一年，你都学了些啥呢？
如果你不会结构化思维，你可能会这样回答...
怎么样？是不是感觉很不一样呢？
好，说了那么多结构化思维的好处，那么，我们应该如何才能拥有这种能力呢？
接下来，我就带你从最基本的地方开始说起，帮助你快速学会结构化思维。
快速学会结构化思维 有一天，你驾驶着自己的汽车，在路上游荡，汽车突然停下，发生哄哄的巨响，无法行驶，怎么办？
是哪里出了问题？轮胎？轴承？发动机？油箱？还是有只猫在车里作怪？
一辆汽车，拥有上万个零件，当你发现汽车的行驶功能出现故障时，如果你不是专业修汽车的，你根本不知道是哪个零件可能出了问题，你能想到的也是这上万零件里的一小部分...
那怎么办？ 你一通乱试后，最终无果，只得叫来拖车，将汽车送入了修理厂...
师傅一看，说：小问题，你稍等片刻…
然后咔咔咔，不到一局王者荣耀的时间，就把车给修好了！
为什么能那么快？
不是有上万个零件吗？
如果逐个检查一遍，至少也需要一天的时间啊，这还不算更换和维修的时间！
师傅为什么能那么快？</description></item><item><title>结构化思维</title><link>https://goplscn.github.io/post/structure-thinking/</link><pubDate>Sat, 04 Jan 2020 20:50:13 +0000</pubDate><guid>https://goplscn.github.io/post/structure-thinking/</guid><description>技术人具备“结构化思维”意味着什么? 作者:张建飞 高级技术专家
在日常工作中，我们时常会碰到这样的情况，有的人讲事情逻辑非常混乱，罗列了很多事项，却把握不到重点，无法把一件事情说清楚。这种思维混乱是典型的缺少结构化思维的表现。结构化思维非常重要，不仅仅体现在表达上，也体现在在我们分析问题的过程中。具备结构化思维，才能将问题分析地更全面、更深刻。
什么是结构化思维? 那么到底是什么是结构化思维呢?简单来说，结构化思维的定义就是:逻辑 + 套路。
表达要有逻辑 所谓逻辑是指我们的结构之间必须是有逻辑关系的。例如，你说话的时候用“第一、第二、第三”这个逻辑顺序是合理的，但是，用“第一，第二，第四”就会显得很奇怪。当然，即使你用了”一、二、三”，也不一定就意味着你的内容有逻辑关系。
想让内容有逻辑关系，我们要学会四种组织思想的逻辑关系:
1)演绎(因果)顺序:“大前提、小前提、结论”的演绎推理方式就是演绎顺序。
比如，经典三段论:所有人都要死，苏格拉底是人，苏格拉底要死。
2)时间(步骤)顺序:“第一、第二、第三”，“首先、然后、再者”等，很多的时间顺序同时也是因果顺序。
3)空间(结构)顺序:“前端、后端、数据”，“波士顿、纽约、华盛顿”，化整为零(将整体分解为部分)等都是空间顺序。
4)程度(重要性)顺序:比如“最重要、次重要、不重要”等。 实际上，所有的逻辑关系都在这四种顺序之内。只要我们的思想和表达在这四种逻辑顺序之内，就是有逻辑的，否则就会显得没有逻辑性。
做事要有套路 套路是指我们解决问题的方法论，这个也非常重要。比如，5W2H 分析法就是一个非常好的，可以帮助我们分析问题的一个”套路”。试想一下，面对任何一个问题，你都能从 Why、Who、When、Where、What、How 和 How much(如下图所示)，七个方面去思考。是不是比不知道这个方法论的人，用点状的思考，5W2H 分析法就全面得多。
图片来源:https://www.toutiao.com/i6619057728725729800/
例如，我们在对问题域进行分析和领域知识提炼的时候，就可以用上 5W2H。 5W2H 模型给出了具有指导意义的约束，要求我们提炼的领域知识必须具备模型的六个要素。这就好比两位侃侃而谈的交谈者，因为有了确定的主题与话题边界，一场本来是漫无目的野鹤闲云似的闲聊就变成了一次深度交流的专题高端对话。
逻辑是一种能力，而套路是方法论，是经验。逻辑是道的东西，而方法论是术的东西。二者都很重要，只有熟练的掌握二者我们才能更好的进行结构化思考。
如何进行结构化思考? 逻辑性和方法论是结构化思维的底层，那么如何进行结构化思考呢?这也是有方法论的，总的来说是有两个步骤，首先是“建立中心”，然后再进行“分解”。
建立中心 建立中心也就是要定义清楚要解决的问题，要明确目标。是我们结构的顶层节点，也是一种以终为始的思考方式。也就是说，我们首先要搞清楚 why，然后再进行 how。
★ 建立中心有两种方式:
自上而下:适用于问题比较明确的情况，我们只需要找到问题的核心要素即可，然后进行展开即可。
自下而上:对于问题不够明确的情况，我们需要对多种杂乱的内容，进行分类、剪枝、归纳汇总成一个中心。 建立中心通常不会是一次成型的，随着对问题理解的变化，对中心的抽象也会进行相应的调整。不同的抽象层次其面对的问题宽度是不一样的。具体要用哪个层次的抽象作为“中心”，要视具体情况而定。
比如面对“系统 bug 多”的问题，向上抽象是“提升代码质量”，向下抽象是 “加强测试”，都可以作为中心，选择哪个为中心取决于你当前要解决的问题是什么。
结构化分解 确定完中心之后，我们需要构建一个结构，使用结构化的思维对问题进行分解。 分解的策略就是我们上文提到的四种逻辑顺序，即演绎顺序、时间顺序、空间顺序和程度顺序。
在做空间分解的时候，要注意满足 MECE(Mutually Exclusive Collectively Exhaustive，相互独立，完全穷尽)原则。
比如我们要对衣服进行分类，如果按照季节和风格进行分类，就会出现互相重叠，并且不能穷尽的情况，也就不满足 MECE。这种分类是逻辑混乱的。
图片来源:https://www.toutiao.com/i6619057728725729800/
我们可以按季节分:春秋装，冬装，夏装。除了这 3 类之外，没有其他季节了， 这个就是「不遗漏」。
图片来源:https://www.toutiao.com/i6619057728725729800/</description></item><item><title>麦肯锡教我的思考武器</title><link>https://goplscn.github.io/post/issue-driven/</link><pubDate>Sat, 28 Sep 2019 22:48:58 +0000</pubDate><guid>https://goplscn.github.io/post/issue-driven/</guid><description>议题驱动 《麦肯锡教我的思考武器——从逻辑思考到真正解决问题》
思考，不要用蛮力！工作，不只靠体力！
从议题出发，创造有价值的工作
解决问题之前，要先查明问题 提升答案的质量并不够，提升议题的质量更重要 不是知道越多越聪明，而是知道太多会变笨 与其快速做完每一件事，不如删减要做的事 与其计较数字多寡，不如计较到底有没有答案 价值矩阵 交出有价值成果的生产技术价值矩阵议题度有价值的工作解答度败者之路 以价值为导向的组织里只谈功劳不谈苦劳 对于议题度低的问题，无论多么努力拼命地挤出答案，终究也不能提高其价值，只是白忙而已 只靠努力与蛮力，不可能达到右上方有价值的工作区域 background价值矩阵低议题度-高解答度高议题度-高解答度低议题度-低解答度高议题度-低解答度解答度解答度解 &amp;#8203;答 &amp;#8203;度议题度议题度议题度有价值的工作有价值的工作低议题度-低解答度高议题度-高解答度败者之路败者之路败者之路败者之路无法产出有价值的工作高议题度-低解答度查明议题查明议题查明议题推敲解答推敲解答推敲&amp;#8203;解答</description></item></channel></rss>